1、使用Charles 进行接口数据模拟 实现本地数据mock (Charles)



4.2 父组件通过属性给子组件传值，子组件通过this.props.来访问、子组件不能修改父组件的数据，通过父组件给子组件传递函数，后在子组件中调用该函数给父组件

4.3 react 单项数据流 子组件不能修改父组件的数据

4.4 PropTypes 与 DefaultProps 父组件给子组件传值的类型以及默认值

4.5 Props, State与render函数的关系 (为什么数据发生变化，页面为什么重新渲染)

4.6 什么是虚拟DOM？(偏向于理论)

  1.state 数据
  2.jsx模板
  3.数据 + 模板 结合，生成真实的DOM，来显示
  4.state 发生改变
  5.数据 + 模板 结合，生成真实的DOM， 替换原始的DOM

  缺陷： 第一次生成了一个完整的DOM片段
         第二次生成了一个完整的DOM片段
         第二次替换第一次的DOM，非常耗性能

  新的做法：
  1.state 数据
  2.jsx模板
  3.数据 + 模板 结合，生成真实的DOM，来显示
  4.state 发生改变
  5. 数据+模板 结合，生成真实DOM，并不直接替换原始DOM
  6.新的DOM(DoucumentFragment)和原始的DOM做对比，找差异
  7.找出input 框发生了变化
  8.只用新的DOM中的input元素，替换掉老的DOM中的input元素

  缺陷：
    性能比上一种好很多，但是在对比的时候还是会损耗掉许多性能, 性能提升并不明显

  改进： 减少真实DOM的创建以及真实DOM的对比
  1.state 数据
  2.jsx模板
  <div id="abc"><span>hello world</span></div>
  3.生成虚拟DOM（就是一个js对象，用它来描述真实DOM）（损耗了性能）
  4.用虚拟DOM的结构，生成真实的DOM，来显示
  ['div', {id: 'abc'}, ['span', {}, 'hello world']]
  5. state 发生变化
  6.数据 + 模板 生成新的虚拟DOM （极大的提升了性能）
  ['div', {id: 'abc'}, ['span', {}, 'bye bye']]
  7.比较原始虚拟DOM和新的虚拟DOM的区别，找到区别是span中的内容 (js对象比较可以提升性能）
  8.直接操作DOM，改变span中的内容

  优点：性能提升、它使得跨端应用得以实现。React Native


4.7 虚拟DOM中的Diff算法
  虚拟DOM对比 找差异的过程中就是Diff算法
  数据发生变化setState -> Diff -> render

  调用3次setState 如果变化很小，react底层会合并成一个setState在去对比虚拟DOM 节省对比的性能
  只比对一层虚拟DOM,同层的DOM对比，算法简单，第一层不同，下面的所有虚拟都会覆盖

  循环中用index做key值不建议，虚拟DOM中对比中需要一一对应


4.8 react 中 ref 的使用
  在es6中是一个函数 不建议使用ref,在复杂的页面不可避免要用到ref

4.9 React 的生命周期函数
  指在某一个时刻组件会自动执行的函数

  1.初始化
  2.componentWillMount 在组件即将被挂架到页面的时刻执行, 只执行第一次
  3.render
  4.componentDidMount 组件被挂在到页面之后执行, 只执行第一次

  5.组件更新中也会有生命周期函数
    props 与 state 发生变化，流程有一些小差异

    props: componentWillReceiveProps/shouldComponentUpdate/componentWillUpdate/render/  componentDidUpdate

    state: shouldComponentUpdate/componentWillUpdate/render/  componentDidUpdate

  6.componentWillUnmount 组件即将被从页面中删除的时候会被执行


5.0 生命周期函数的使用场景

  父组件数据改变渲染会导致子组件，会损耗性能  
  shouldComponentUpdate(nextProps, nextState) {
    if (nextProps.content !== this.props.content) {
      return true;
    } else {
      return false;
    }
  }

5.1 react 的 css 过度动画
  通过数据控制className + css3动画 @keyframes

5.2 react-transition-group 实现动画



6.0 Redux 概念简述  Readux = Reducer + Flux

6.1 Redux 的工作流程





